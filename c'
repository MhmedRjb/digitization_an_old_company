-- Create the inventory_history table with the necessary columns
CREATE TABLE inventory_history (
    date DATE, -- The date for the inventory level
    item VARCHAR(255), -- The item being tracked
    quantity INT, -- The quantity of the item on the given date
    value FLOAT, -- The total value of the item on the given date
    cost FLOAT -- The total cost of the item on the given date
);

-- Use the store_table to get the initial inventory levels for each item
INSERT INTO inventory_history (date, item, quantity, value, cost)
SELECT
    'start_date' AS date,
    item,
    beginning_quantity AS quantity,
    0 AS value,
    0 AS cost
FROM store_table;

-- Add the initial inventory levels to the movement_goods table as the first transaction for each item
INSERT INTO movement_goods (date, item, quantity, value, cost)
SELECT
    'start_date' AS date,
    item,
    beginning_quantity AS quantity,
    0 AS value,
    0 AS cost
FROM store_table;

-- Insert a new row into the inventory_history table for each day and item using data from the movement_goods table
INSERT INTO inventory_history (date, item, quantity, value, cost)
SELECT
    m.date, -- The date from the movement_goods table
    m.item, -- The item from the movement_goods table
    -- Calculate the quantity for the item on the given date by subtracting the total quantity sold from the total quantity bought
    SUM(CASE WHEN m.quantity > 0 THEN m.quantity ELSE 0 END) - SUM(CASE WHEN m.quantity < 0 THEN m.quantity ELSE 0 END) AS quantity,
    -- Calculate the total value for the item on the given date by summing the values of all purchases
    SUM(CASE WHEN m.quantity > 0 THEN m.value ELSE 0 END) AS value,
    -- Calculate the total cost for the item on the given date by summing the costs of all purchases
    SUM(CASE WHEN m.quantity > 0 THEN m.cost ELSE 0 END) AS cost
FROM 
    movement_goods m -- The movement_goods table
WHERE 
    m.date >= 'start_date' AND m.date <= 'end_date' -- Filter the transactions to the desired date range
GROUP BY 
    m.date, m.item; -- Group the results by date and item
You're correct that the beginning_quantity can be considered as the quantity at the old date or the first date in the movement_goods table. In that case, we wouldn't need to use a separate column for the beginning_quantity and could instead use the quantity from the first date in the movement_goods table as the initial quantity for each item.

Here's an example of how we can modify the SQL code to use the quantity from the first date in the movement_goods table as the initial quantity for each item:

CREATE TABLE inventory_history (
    date DATE,
    item VARCHAR(255),
    quantity INT,
    value FLOAT,
    cost FLOAT
);

INSERT INTO inventory_history (date, item, quantity, value, cost)
SELECT
    MIN(date) AS date,
    item,
    quantity AS quantity,
    0 AS value,
    0 AS cost
FROM
    movement_goods
GROUP BY
    item;

INSERT INTO inventory_history (date, item, quantity, value, cost)
SELECT
    m.date,
    m.item,
    SUM(CASE WHEN m.quantity > 0 THEN m.quantity ELSE 0 END) - COALESCE((
        SELECT SUM(quantity)
        FROM inventory_history ih
        WHERE ih.item = m.item
        AND ih.date < m.date
    ), (
        SELECT quantity
        FROM inventory_history ih
        WHERE ih.item = m.item
        AND ih.date = (
            SELECT MIN(date)
            FROM movement_goods
            WHERE item = m.item
        )
    )) AS quantity,
    SUM(CASE WHEN m.quantity > 0 THEN m.value ELSE 0 END) AS value,
    SUM(CASE WHEN m.quantity > 0 THEN m.cost ELSE 0 END) AS cost
FROM
    movement_goods m
GROUP BY
    m.date, m.item;
In this modified SQL code, we use the MIN(date) function to get the first date in the movement_goods table and the quantity from that date as the initial quantity for each item. We insert a row for each item with the initial quantity and the starting date (MIN(date)) into the inventory_history table.

After that, we use the movement_goods table to track the changes in inventory levels over time as before.

I hope this modified SQL code meets your requirements. Let me know if you have any further questions or need more assistance.

where the part when i take the inial from stire table

In the modified SQL code that I provided earlier, we use the store_table to get the beginning quantity for each item, which we use to initialize the inventory_history and movement_goods tables:

CREATE TABLE inventory_history (
    date DATE,
    item VARCHAR(255),
    quantity INT,
    value FLOAT,
    cost FLOAT
);

INSERT INTO inventory_history (date, item, quantity, value, cost)
SELECT
    'start_date' AS date,
    item,
    beginning_quantity AS quantity,
    0 AS value,
    0 AS cost
FROM
    store_table;

INSERT INTO movement_goods (date, item, quantity, value, cost)
SELECT
    'start_date' AS date,
    item,
    beginning_quantity AS quantity,
    0 AS value,
    0 AS cost
FROM
    store_table;
In this code, we insert a row for each item into the inventory_history and movement_goods tables with the starting date (start_date) and the beginning quantity from the store_table. The quantity column in both tables is initialized with the beginning_quantity column from the store_table.

After that, we use the movement_goods table to track the changes in inventory levels over time and update the inventory_history table accordingly.

I hope this clarifies how we use the store_table to get the beginning quantity for each item. Let me know if you have any further questions or need more assistance.

